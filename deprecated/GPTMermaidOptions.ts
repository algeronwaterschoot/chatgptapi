export interface Flowchart {

    unimplemented?: {
        curve?: 'linear' | 'basis' | 'cardinal' | 'step' | 'monotone';
        htmlLabels?: boolean;
        useMaxWidth?: boolean;
        diagramPadding?: number;
        nodeSpacing?: number;
        rankSpacing?: number;
        nodeAlign?: 'center' | 'left' | 'right';
        edgeAlign?: 'center' | 'left' | 'right';
        rankDir?: 'TB' | 'BT' | 'LR' | 'RL';
        rankSep?: number;
        edgeSep?: number;
        marginX?: number;
        marginY?: number;
        padding?: number;
        boxPadding?: number;
        borderRadius?: number;
        background?: string;
        fontFamily?: string;
        fontSize?: number;
        fontWeight?: number | string;
        fontStyle?: string;
        textAlign?: 'center' | 'left' | 'right';
        fill?: string;
        stroke?: string;
        strokeWidth?: number;
        strokeDasharray?: string;
        classDef?: string;
        class?: string;
        css?: string;
        defs?: string;
        mathjax?: boolean;
        sequence?: boolean;
        conditional?: boolean;
        inputProps?: object;
        graph?: object;
        mermaid?: object;
        gantt?: object;
        flowchart?: object;
        info?: object;
        init?: object;
        kbd?: boolean;
        raphael?: string;
        logLevel?: string;
        nodeTitle?: boolean;
        callback?: Function;
        click?: Function;
        mouseover?: Function;
        mouseout?: Function;
        render?: Function;
        style?: {
            width?: number;
            height?: number;
            fill?: string;
            stroke?: string;
            strokeWidth?: number;
            rx?: number;
            ry?: number;
            shape?: string;
            shapeStyle?: string;
            shapeOpposite?: boolean;
            edgeLabelBackground?: string;
            edgeLabelSize?: number;
            edgeLabelColor?: string;
            fontFamily?: string;
            fontSize?: number;
            fontWeight?: number | string;
            css?: string;
            class?: string;
            alignment?: string;
            text?: string;
            textOpacity?: number;
            textValign?: string;
            textHalign?: string;
            dy?: string;
            dx?: string;
            segmentIndex?: number;
            segmentCount?: number;
            isLast?: boolean;
            isStart?: boolean;
            startOffset?: number;
            strokeWidths?: string;
            strokeDasharray?: string;
        };
        shapes?: {
            shape?: string;
            text?: string;
            fill?: string;
            stroke?: string;
            strokeWidth?: number;
            class?: string;
            align?: string;
            background?: string;
            borderRadius?: number;
            fontStyle?: string;
            fontSize?: number;
            fontFamily?: string;
            margin?: number;
            padding?: number;
            lineHeight?: number;
            height?: number;
            width?: number;
            isExpanded?: boolean;
            isCollapsed?: boolean;
            img?: string;
            imageWidth?: number;
            imageHeight?: number;
        }
    }
}
;
export interface SequenceDiagram {
    actorMargin?: number;
    actorFontSize?: number;
    boxMargin?: number;
    boxTextMargin?: number;
    noteMargin?: number;
    messageMargin?: number;
    mirrorActors?: boolean;
    bottomMarginAdj?: number;
    useMaxWidth?: boolean;
    rightAngles?: boolean;
    showSequenceNumbers?: boolean;
    actorBackgroundColor?: string;
    actorBorderColor?: string;
    actorBorderRadius?: number;
    actorBorderWidth?: number;
    actorFontFamily?: string;
    actorFontWeight?: string;
    messageFontSize?: string;
    messageFontFamily?: string;
    noteFontSize?: string;
    noteFontFamily?: string;
    noteAlign?: 'left' | 'center' | 'right';
    messageAlign?: 'left' | 'center' | 'right';
    activationFontSize?: string;
    activationFontFamily?: string;
}
;
export interface Gantt {
    titleTopMargin?: number;
    barHeight?: number;
    barGap?: number;
    topPadding?: number;
    leftPadding?: number;
    gridLineStartPadding?: number;
    fontSize?: number;
    fontFamily?: string;
    numberSectionStyles?: number;
    axisFormat?: string;
    timeFormat?: string;
}
;
export interface ClassDiagram {
    arrowMarkerAbsolute?: boolean;
    bendAmount?: number;
    classMargin?: number;
    curve?: 'linear' | 'basis' | 'cardinal' | 'step' | 'monotone';
    fontFamily?: string;
    fontSize?: number;
    fontWeight?: number | string;
    fontStyle?: string;
    fill?: string;
    stroke?: string;
    strokeWidth?: number;
    title?: string;
    useMaxWidth?: boolean;
    callback?: Function;
    click?: Function;
    mouseover?: Function;
    mouseout?: Function;
    render?: Function;
    widthConstraint?: number;
    wrap?: boolean;
    style?: {
        width?: number;
        height?: number;
        fill?: string;
        stroke?: string;
        strokeWidth?: number;
        rx?: number;
        ry?: number;
        shape?: string;
        shapeStyle?: string;
        shapeOpposite?: boolean;
        edgeLabelBackground?: string;
        edgeLabelSize?: number;
        edgeLabelColor?: string;
        fontFamily?: string;
        fontSize?: number;
        fontWeight?: number | string;
        css?: string;
        class?: string;
        alignment?: string;
        text?: string;
        textOpacity?: number;
        textValign?: string;
        textHalign?: string;
        dy?: string;
        dx?: string;
        segmentIndex?: number;
        segmentCount?: number;
        isLast?: boolean;
        isStart?: boolean;
        startOffset?: number;
        strokeWidths?: string;
        strokeDasharray?: string;
    };
}
;
export interface StateDiagram {
    direction?: 'TB' | 'BT' | 'RL' | 'LR';
    layout?: 'hierarchical' | 'linear';
    backgroundColor?: string;
    fill?: string;
    stroke?: string;
    strokeWidth?: number;
    fontSize?: number;
    fontFamily?: string;
    fontWeight?: number | string;
    fontStyle?: string;
    fillOpacity?: number;
    strokeOpacity?: number;
    linkMargin?: number;
    subgraphMargin?: number;
    defaultEdgeLabelBackgroundColor?: string;
    defaultEdgeLabelColor?: string;
    defaultNodeLabelBackgroundColor?: string;
    defaultNodeLabelColor?: string;
    defaultEdgeLabelFontSize?: number;
    defaultNodeLabelFontSize?: number;
    curve?: 'linear' | 'basis' | 'cardinal' | 'step' | 'monotone';
    useMaxWidth?: boolean;
    class?: string;
    css?: string;
    defs?: string;
    sequence?: boolean;
    info?: object;
    init?: object;
    graph?: object;
    flowchart?: object;
    mermaid?: object;
    kbd?: boolean;
    raphael?: string;
    logLevel?: string;
    nodeTitle?: boolean;
    callback?: Function;
    click?: Function;
    mouseover?: Function;
    mouseout?: Function;
    render?: Function;
    style?: {
        width?: number;
        height?: number;
        fill?: string;
        stroke?: string;
        strokeWidth?: number;
        rx?: number;
        ry?: number;
        shape?: string;
        shapeStyle?: string;
        shapeOpposite?: boolean;
        edgeLabelBackground?: string;
        edgeLabelSize?: number;
        edgeLabelColor?: string;
        fontFamily?: string;
        fontSize?: number;
        fontWeight?: number | string;
        css?: string;
        class?: string;
        alignment?: string;
        text?: string;
        textOpacity?: number;
        textValign?: string;
        textHalign?: string;
        dy?: string;
        dx?: string;
        segmentIndex?: number;
        segmentCount?: number;
        isLast?: boolean;
        isStart?: boolean;
        startOffset?: number;
        strokeWidths?: string;
        strokeDasharray?: string;
    };
}
;
export interface Journey {
    backgroundColor?: string;
    fill?: string;
    stroke?: string;
    strokeWidth?: number;
    fontSize?: number;
    fontFamily?: string;
    fontWeight?: number | string;
    fontStyle?: string;
    fillOpacity?: number;
    strokeOpacity?: number;
    layout?: 'vertical' | 'horizontal';
    title?: string;
    curve?: 'linear' | 'basis' | 'cardinal' | 'step' | 'monotone';
    useMaxWidth?: boolean;
    class?: string;
    css?: string;
    defs?: string;
    sequence?: boolean;
    info?: object;
    init?: object;
    graph?: object;
    flowchart?: object;
    mermaid?: object;
    kbd?: boolean;
    raphael?: string;
    logLevel?: string;
    nodeTitle?: boolean;
    callback?: Function;
    click?: Function;
    mouseover?: Function;
    mouseout?: Function;
    render?: Function;
    style?: {
        width?: number;
        height?: number;
        fill?: string;
        stroke?: string;
        strokeWidth?: number;
        rx?: number;
        ry?: number;
        shape?: string;
        shapeStyle?: string;
        shapeOpposite?: boolean;
        edgeLabelBackground?: string;
        edgeLabelSize?: number;
        edgeLabelColor?: string;
        fontFamily?: string;
        fontSize?: number;
        fontWeight?: number | string;
        css?: string;
        class?: string;
        alignment?: string;
        text?: string;
        textOpacity?: number;
        textValign?: string;
        textHalign?: string;
        dy?: string;
        dx?: string;
        segmentIndex?: number;
        segmentCount?: number;
        isLast?: boolean;
        isStart?: boolean;
        startOffset?: number;
        strokeWidths?: string;
        strokeDasharray?: string;
    };
    arrowMarkerAbsolute?: boolean;
    stateRadius?: number;
    stateBackgroundColor?: string;
    stateBorderColor?: string;
    stateBorderWidth?: number;
    stateFontFamily?: string;
    stateFontSize?: number;
    stateFontWeight?: number | string;
    stateFontStyle?: string;
    transitionDuration?: number;
    transitionEasing?: string;
    transitionPadding?: number;
    hideFooter?: boolean;
    legendPosition?: 'bottom' | 'right' | 'none';
}
;
